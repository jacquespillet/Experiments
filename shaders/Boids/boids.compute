#version 430 core

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;


struct particle
{
   vec3 position;
   float pad0;
   vec3 velocity;
   float mass;
   vec3 acceleration;
   float invMass;
};


layout (std430, binding = 10) buffer ParticlesBuffer {
   particle particles [];
};

layout (std430, binding = 11) buffer PreviousParticlesBuffer {
   particle previousParticles [];
};

uniform int numParticles;

uniform float softeningFactor;
uniform float damping;
uniform float timestep;

void main() {
   particle particleI = previousParticles[gl_GlobalInvocationID.x];
   particleI.acceleration = vec3(0,0,0);

   for(int j=0; j<numParticles; j++)
   {
      // if(j == gl_GlobalInvocationID.x) continue;
      
      particle particleJ = previousParticles[j];

      vec3 r = particleJ.position - particleI.position;

      float distSqr = r.x * r.x + r.y * r.y + r.z * r.z + softeningFactor;
      // if(distSqr>0)
      {
         float invDist = 1.0 / sqrt(distSqr);
         float invDistCube =  invDist * invDist * invDist;
         float s = particleJ.mass * invDistCube;

         particleI.acceleration += r * s;
      }
   }

   particleI.velocity += timestep *  particleI.acceleration * particleI.invMass;
   particleI.velocity *= damping;
   
   particleI.position += timestep *  particleI.velocity;

   particles[gl_GlobalInvocationID.x] = particleI;
}
  