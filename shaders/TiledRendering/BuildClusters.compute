#version 430

struct Cluster
{
    vec3 min;
    int isActive;
    vec3 max;
    float pad1;
};

layout(std430, binding = 2) writeonly buffer clustersBlock {
	Cluster clusters[];
};

uniform uint clusterPixelSizeX;

uniform mat4 inverseProjection;
uniform vec2 screenResolution;

uniform float zNear;
uniform float zFar;

vec3 screenToView(vec4 input)
{
    vec2 texCoord = input.xy / screenResolution;
    vec4 clip = vec4(vec2(texCoord.x, texCoord.y)* 2.0 - 1.0, input.z, input.w);    

    vec4 viewPosition = inverseProjection * clip;
    viewPosition /= viewPosition.w;
    return viewPosition.xyz;
}

vec3 LineIntersectZPlane(vec3 A, vec3 B, float zDistance)
{
    vec3 normal = vec3(0.0f, 0.0f, 1.0f);
    vec3 ab = B - A;
    float t = (zDistance - dot(normal, A)) / dot(normal, ab);
    vec3 result = A + t * ab;
    return result;
}

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() {
    vec3 eyePos = vec3(0,0,0);
    uint tileIndex = gl_WorkGroupID.x +
                     gl_WorkGroupID.y * gl_NumWorkGroups.x +
                     gl_WorkGroupID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y);

    float tileNear  = -zNear * pow(zFar/ zNear, gl_WorkGroupID.z/float(gl_NumWorkGroups.z));
    float tileFar   = -zNear * pow(zFar/ zNear, (gl_WorkGroupID.z + 1) /float(gl_NumWorkGroups.z));

    vec4 ssMinPoint = vec4(vec2(gl_WorkGroupID.x, gl_WorkGroupID.y) * clusterPixelSizeX, -1.0, 1.0);
    vec4 ssMaxPoint = vec4(vec2(gl_WorkGroupID.x+1, gl_WorkGroupID.y+1) * clusterPixelSizeX, -1.0, 1.0);
    
    vec3 viewMinPoint = screenToView(ssMinPoint);
    vec3 viewMaxPoint = screenToView(ssMaxPoint);

    vec3 minPointNear = LineIntersectZPlane(eyePos, viewMinPoint, tileNear);
    vec3 minPointFar = LineIntersectZPlane(eyePos, viewMinPoint, tileFar);
    vec3 maxPointNear = LineIntersectZPlane(eyePos, viewMaxPoint, tileNear);
    vec3 maxPointFar = LineIntersectZPlane(eyePos, viewMaxPoint, tileFar);

    vec3 minPoint = min(min(minPointNear, minPointFar), min(maxPointNear, maxPointFar));
    vec3 maxPoint = max(max(minPointNear, minPointFar), max(maxPointNear, maxPointFar));

    clusters[tileIndex].min = minPoint;
    clusters[tileIndex].max = maxPoint;
    clusters[tileIndex].isActive =0;

}