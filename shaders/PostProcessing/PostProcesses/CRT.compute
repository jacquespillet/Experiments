//inputs
#version 440
//output
layout ( binding = 0 , rgba16f ) uniform image2D textureIn;
layout ( binding = 1 , rgba16f ) uniform image2D textureOut;

layout ( local_size_x = 32 , local_size_y = 32) in;

#define PI 3.1415926535897

uniform vec2 curvature;
uniform vec2 scanLineOpacity;
uniform vec2 resolution;
uniform float brightness;

vec2 curveRemapUV(vec2 uv)
{
    uv = uv * 2.0-1.0;
    vec2 offset = abs(uv.yx) / vec2(curvature.x, curvature.y);
    uv = uv + uv * offset * offset;
    uv = uv * 0.5 + 0.5;
    return uv;
}
vec3 scanLineIntensity(float uv, float resolution, float opacity)
{
    float intensity = sin(uv * resolution * PI * 2.0);
    intensity = ((0.5 * intensity) + 0.5) * 0.9 + 0.1;
    return vec3(pow(intensity, opacity));
}
 

void main()
{
    ivec2 pixelCoord = ivec2 ( gl_GlobalInvocationID.xy );
    
    vec2 uv = vec2(pixelCoord) / vec2(imageSize(textureIn));
    uv = curveRemapUV(uv);
    ivec2 sampleCoord = ivec2(uv * vec2(imageSize(textureIn)));

    vec3 color=vec3(0,0,0);
    if(uv.x>=0 || uv.y >= 0 || uv.x <= 1 || uv.y <= 1)
    {
        color =imageLoad(textureIn, sampleCoord).rgb;
        color *= scanLineIntensity(uv.x, resolution.x * float(imageSize(textureIn).y), scanLineOpacity.x);
        color *= scanLineIntensity(uv.y, resolution.y * float(imageSize(textureIn).x), scanLineOpacity.y);
        color *= brightness;
    }
    imageStore ( textureOut , pixelCoord , vec4(color, 1));
}