#version 430 core

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding = 0, r32f) uniform image2D inputDepth;
layout (binding = 1, r32f) uniform image2D outputDepth;


#define SIGMA 10.0
#define BSIGMA 0.1

uniform int kernelSize;
uniform ivec2 direction;
uniform float blurScale;
uniform float blurDepthFalloff;

float normpdf(in float x, in float sigma)
{
	return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

float normpdf3(in vec3 v, in float sigma)
{
	return 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma;
}


// float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);
void main() {
    ivec2 pixelPosition = ivec2(gl_GlobalInvocationID.xy);
    
    float kernel[50];

    //declare stuff
    const int kSize = (kernelSize-1)/2;
    float finalDepth = 0.0f;
    
    float c = imageLoad(inputDepth, pixelPosition).r;

    //create the 1-D kernel
    float Z = 0.0;
    for (int j = 0; j <= kSize; ++j)
    {
        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), SIGMA);
    }
    
    
    float cc;
    float factor;
    float bZ = 1.0/normpdf(0.0, BSIGMA);
    //read out the texels
    for (int i=-kSize; i <= kSize; ++i)
    {
        cc = imageLoad(inputDepth, pixelPosition + i * direction).r;
        factor = normpdf(cc-c, BSIGMA)*bZ*kernel[kSize+i];
        Z += factor;
        finalDepth += factor*cc;
    }
    
    
    // float fragColor = vec4(final_colour/Z, 1.0);
    finalDepth /= Z;

    imageStore(outputDepth, ivec2(pixelPosition), vec4(finalDepth, 0, 0,0));


    // float depth = tex2D(depthSampler, texcoord).x;
    // float depth = imageLoad(inputDepth, pixelPosition).r;
    // float sum = 0;
    // float wsum = 0;
    // for(float x=-kernelSize; x<=kernelSize; x+=1.0) {
    //     // float sample = tex2D(depthSampler, texcoord + x*direction).x;
    //     float sampleV = imageLoad(inputDepth, pixelPosition + int(x) * direction).r;

    //     // spatial domain
    //     float r = x * blurScale;
    //     float w = exp(-r*r);

    //     // range domain
    //     float r2 = (sampleV - depth) * blurDepthFalloff;
    //     float g = exp(-r2*r2);
        
    //     sum += sampleV * w * g;
    //     wsum += w * g;
    // }
    // if (wsum > 0.0) {
    //     sum /= wsum;
    // }
    // imageStore(outputDepth, ivec2(pixelPosition), vec4(sum, 0, 0,0));
}
