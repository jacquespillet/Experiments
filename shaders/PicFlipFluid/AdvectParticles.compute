layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

uniform float dt;
uniform vec3 look;
uniform vec3 eye;
uniform vec3 mousePos;
uniform vec3 mouseVel;

const float mouse_range = 1;

bool raySphereIntersection(vec3 r0, vec3 rd, vec3 s0, float sr) {
    float a = dot(rd, rd);
    vec3 s0r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0r0);
    float c = dot(s0r0, s0r0) - (sr * sr);
    if (b*b - 4.0*a*c < 0.0) {
        return false;
    }
    return true;
}

const uint k = 1103515245U;  // GLIB C

vec3 hash3(uvec3 x) {
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    
    return vec3(x)*(1.0/float(0xffffffffU));
}


void main() {
    uint index = gl_GlobalInvocationID.x;
    // TODO: don't use explicit Euler integration
    particle[index].pos += particle[index].vel * dt;
    
    // jitter particle positions to prevent squishing
    const float jitter = 0.005;
    particle[index].pos += hash3(floatBitsToInt(particle[index].pos)) * jitter - 0.5 * jitter;

    vec3 epsilon = vec3(0.00001);//cell_size - 0.01;
    particle[index].pos = clamp(particle[index].pos, boundsMin + epsilon, boundsMax - epsilon);

    bool hit = raySphereIntersection(mousePos, normalize(mousePos - eye), particle[index].pos, mouse_range);
    if (hit)
        particle[index].vel += mouseVel;
}
