layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform float dt;

void main() {
    ivec3 gridPosition = ivec3(gl_WorkGroupID);
    uint index = getGridFlatIndex(gridPosition);

    if (cell[index].type == AIR) {
        cell[index].pressure = 0;
        return;
    }
    if (cell[index].type == SOLID) {
        // invalid
        cell[index].pressure = 0;
        return;
    }

    float L_Up = 0;

    if (gridPosition.x > 0) {
        uint j = getGridFlatIndex(gridPosition + ivec3(-1, 0, 0));
        L_Up += cell[j].aX * cell[j].pressureGuess;
    }
    if (gridPosition.y > 0) {
        uint j = getGridFlatIndex(gridPosition + ivec3(0, -1, 0));
        L_Up += cell[j].aY * cell[j].pressureGuess;
    }
    if (gridPosition.z > 0) {
        uint j = getGridFlatIndex(gridPosition + ivec3(0, 0, -1));
        L_Up += cell[j].aZ * cell[j].pressureGuess;
    }

    if (gridPosition.x < gridDim.x - 2) {
        uint j = getGridFlatIndex(gridPosition + ivec3(1, 0, 0));
        L_Up += cell[index].aX * cell[j].pressureGuess;
    }
    if (gridPosition.y < gridDim.y - 2) {
        uint j = getGridFlatIndex(gridPosition + ivec3(0, 1, 0));
        L_Up += cell[index].aY * cell[j].pressureGuess;
    }
    if (gridPosition.z < gridDim.z - 2) {
        uint j = getGridFlatIndex(gridPosition + ivec3(0, 0, 1));
        L_Up += cell[index].aZ * cell[j].pressureGuess;
    }

    if (cell[index].aDiag != 0)
        cell[index].pressure = 1.0 / cell[index].aDiag * (cell[index].rhs - L_Up);

}

