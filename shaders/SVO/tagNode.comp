#version 450 core
layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;


struct Voxel
{
	uvec3 position;
	uint color;
};
layout(std430, binding = 2) readonly buffer VoxelList { Voxel voxelList[]; };

layout(std430, binding = 3) buffer uuOctree { uint uOctree[]; };
layout(std430, binding = 9) readonly buffer uuBuildInfo { 
	uint uFragmentNum, uVoxelResolution, uAllocBegin, uAllocNum;
};

uvec4 LeafToUvec4(uint val) { return uvec4( (val & 0xffu), ((val >> 8u) & 0xffu), ((val >> 16u) & 0xffu), ((val >> 24u) & 0x3fu) ); }
uint Uvec4ToLeaf(uvec4 vec) { return (min(vec.w, 0x3fu) << 24u) | (vec.x & 0xffu) | ((vec.y & 0xffu) << 8u) | ((vec.z & 0xffu) << 16u) | 0xC0000000u; }

void main() {
	//This shader goes for each voxel generated in the list, and tags wether we should split it further or not.
	if(gl_GlobalInvocationID.x >= uFragmentNum) return;
	Voxel voxel = voxelList[gl_GlobalInvocationID.x];

 	//For the first stage, this is 2 ^ 10 : amount of voxels in one axis.
	uint levelDimension = uVoxelResolution;
	uvec3 voxelPosition = voxel.position;
	bvec3 levelComparison;

	uint index = 0u;
	uint current = 0u;
	
	do {
		levelDimension >>= 1; //Multiply by 2
		
		//Check if the current voxel position is greater than the level dimensions
		levelComparison = greaterThanEqual(voxelPosition, uvec3(levelDimension)); //If 
		
		//
		index = current + (uint(levelComparison.x) | (uint(levelComparison.y) << 1u) | (uint(levelComparison.z) << 2u));

		current = uOctree[index] & 0x3fffffffu;

		voxelPosition -= uvec3(levelComparison) * levelDimension;
	} while(current != 0u && levelDimension > 1u);

	uOctree[index] |= 0x80000000u;
	if(levelDimension == 1u) {
		//uOctree[index] = 0xC0000000u | (ufragment.y & 0xffffffu); //termination tag and color data

		//atomic moving average
		uint prev_val = 0;
		uint current_val=0;
		uint new_val = 0xC1000000u | (voxel.color & 0xffffffu);
		
		uvec4 rgba = LeafToUvec4(new_val);
		while( ( current_val = atomicCompSwap(uOctree[index], prev_val, new_val) ) != prev_val ) {
			prev_val = current_val;
			uvec4 prev_rgba = LeafToUvec4(prev_val);
			prev_rgba.xyz *= prev_rgba.w;
			uvec4 current_rgba = prev_rgba + rgba;
			current_rgba.xyz /= current_rgba.w;
			new_val = Uvec4ToLeaf(current_rgba);
		}
	}
}
